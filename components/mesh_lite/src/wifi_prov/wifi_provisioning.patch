diff --git a/components/wifi_provisioning/include/wifi_provisioning/manager.h b/components/wifi_provisioning/include/wifi_provisioning/manager.h
index 72c6d6d50b..7d9c6e74b3 100644
--- a/components/wifi_provisioning/include/wifi_provisioning/manager.h
+++ b/components/wifi_provisioning/include/wifi_provisioning/manager.h
@@ -42,6 +42,7 @@ typedef enum {
      * to the corresponding `wifi_sta_config_t` structure
      */
     WIFI_PROV_CRED_RECV,
+    WIFI_PROV_CUST_DATA_RECV,
 
     /**
      * Emitted when device fails to connect to the AP of which the
diff --git a/components/wifi_provisioning/include/wifi_provisioning/wifi_config.h b/components/wifi_provisioning/include/wifi_provisioning/wifi_config.h
index 6c9d11f5ab..19e214aa50 100644
--- a/components/wifi_provisioning/include/wifi_provisioning/wifi_config.h
+++ b/components/wifi_provisioning/include/wifi_provisioning/wifi_config.h
@@ -72,6 +72,9 @@ typedef struct {
     char    password[64];   /*!< Password of the AP */
     char    bssid[6];       /*!< BSSID of the AP */
     uint8_t channel;        /*!< Channel of the AP */
+    uint32_t mesh_id;
+    char    softap_ssid[33];       /*!< SSID of the AP to which the slave is to be connected */
+    char    softap_passphrase[64];   /*!< Password of the AP */
 } wifi_prov_config_set_data_t;
 
 /**
@@ -130,6 +133,8 @@ typedef struct wifi_prov_config_handlers {
 esp_err_t wifi_prov_config_data_handler(uint32_t session_id, const uint8_t *inbuf, ssize_t inlen,
                                         uint8_t **outbuf, ssize_t *outlen, void *priv_data);
 
+esp_err_t wifi_prov_meshlite_data_handler(uint32_t session_id, const uint8_t *inbuf, ssize_t inlen,
+                                        uint8_t **outbuf, ssize_t *outlen, void *priv_data);
 #ifdef __cplusplus
 }
 #endif
diff --git a/components/wifi_provisioning/proto-c/wifi_config.pb-c.c b/components/wifi_provisioning/proto-c/wifi_config.pb-c.c
index 0be6dcd867..14bb9ac68f 100644
--- a/components/wifi_provisioning/proto-c/wifi_config.pb-c.c
+++ b/components/wifi_provisioning/proto-c/wifi_config.pb-c.c
@@ -418,7 +418,7 @@ const ProtobufCMessageDescriptor resp_get_status__descriptor =
   (ProtobufCMessageInit) resp_get_status__init,
   NULL,NULL,NULL    /* reserved[123] */
 };
-static const ProtobufCFieldDescriptor cmd_set_config__field_descriptors[4] =
+static const ProtobufCFieldDescriptor cmd_set_config__field_descriptors[7] =
 {
   {
     "ssid",
@@ -468,17 +468,57 @@ static const ProtobufCFieldDescriptor cmd_set_config__field_descriptors[4] =
     0,             /* flags */
     0,NULL,NULL    /* reserved1,reserved2, etc */
   },
+  {
+    "mesh_id",
+    100,
+    PROTOBUF_C_LABEL_NONE,
+    PROTOBUF_C_TYPE_INT32,
+    0,   /* quantifier_offset */
+    offsetof(CmdSetConfig, mesh_id),
+    NULL,
+    NULL,
+    0,             /* flags */
+    0,NULL,NULL    /* reserved1,reserved2, etc */
+  },
+  {
+    "softap_ssid",
+    101,
+    PROTOBUF_C_LABEL_NONE,
+    PROTOBUF_C_TYPE_BYTES,
+    0,   /* quantifier_offset */
+    offsetof(CmdSetConfig, softap_ssid),
+    NULL,
+    NULL,
+    0,             /* flags */
+    0,NULL,NULL    /* reserved1,reserved2, etc */
+  },
+  {
+    "softap_passphrase",
+    102,
+    PROTOBUF_C_LABEL_NONE,
+    PROTOBUF_C_TYPE_BYTES,
+    0,   /* quantifier_offset */
+    offsetof(CmdSetConfig, softap_passphrase),
+    NULL,
+    NULL,
+    0,             /* flags */
+    0,NULL,NULL    /* reserved1,reserved2, etc */
+  },
 };
 static const unsigned cmd_set_config__field_indices_by_name[] = {
   2,   /* field[2] = bssid */
   3,   /* field[3] = channel */
+  4,   /* field[4] = mesh_id */
   1,   /* field[1] = passphrase */
+  6,   /* field[6] = softap_passphrase */
+  5,   /* field[5] = softap_ssid */
   0,   /* field[0] = ssid */
 };
-static const ProtobufCIntRange cmd_set_config__number_ranges[1 + 1] =
+static const ProtobufCIntRange cmd_set_config__number_ranges[2 + 1] =
 {
   { 1, 0 },
-  { 0, 4 }
+  { 100, 4 },
+  { 0, 7 }
 };
 const ProtobufCMessageDescriptor cmd_set_config__descriptor =
 {
@@ -488,10 +528,10 @@ const ProtobufCMessageDescriptor cmd_set_config__descriptor =
   "CmdSetConfig",
   "",
   sizeof(CmdSetConfig),
-  4,
+  7,
   cmd_set_config__field_descriptors,
   cmd_set_config__field_indices_by_name,
-  1,  cmd_set_config__number_ranges,
+  2,  cmd_set_config__number_ranges,
   (ProtobufCMessageInit) cmd_set_config__init,
   NULL,NULL,NULL    /* reserved[123] */
 };
diff --git a/components/wifi_provisioning/proto-c/wifi_config.pb-c.h b/components/wifi_provisioning/proto-c/wifi_config.pb-c.h
index 3e293f23be..e002310a0b 100644
--- a/components/wifi_provisioning/proto-c/wifi_config.pb-c.h
+++ b/components/wifi_provisioning/proto-c/wifi_config.pb-c.h
@@ -10,20 +10,20 @@ PROTOBUF_C__BEGIN_DECLS
 
 #if PROTOBUF_C_VERSION_NUMBER < 1003000
 # error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
-#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
+#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
 # error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
 #endif
 
 #include "constants.pb-c.h"
 #include "wifi_constants.pb-c.h"
 
-typedef struct CmdGetStatus CmdGetStatus;
-typedef struct RespGetStatus RespGetStatus;
-typedef struct CmdSetConfig CmdSetConfig;
-typedef struct RespSetConfig RespSetConfig;
-typedef struct CmdApplyConfig CmdApplyConfig;
-typedef struct RespApplyConfig RespApplyConfig;
-typedef struct WiFiConfigPayload WiFiConfigPayload;
+typedef struct _CmdGetStatus CmdGetStatus;
+typedef struct _RespGetStatus RespGetStatus;
+typedef struct _CmdSetConfig CmdSetConfig;
+typedef struct _RespSetConfig RespSetConfig;
+typedef struct _CmdApplyConfig CmdApplyConfig;
+typedef struct _RespApplyConfig RespApplyConfig;
+typedef struct _WiFiConfigPayload WiFiConfigPayload;
 
 
 /* --- enums --- */
@@ -40,7 +40,7 @@ typedef enum _WiFiConfigMsgType {
 
 /* --- messages --- */
 
-struct  CmdGetStatus
+struct  _CmdGetStatus
 {
   ProtobufCMessage base;
 };
@@ -53,10 +53,10 @@ typedef enum {
   RESP_GET_STATUS__STATE__NOT_SET = 0,
   RESP_GET_STATUS__STATE_FAIL_REASON = 10,
   RESP_GET_STATUS__STATE_CONNECTED = 11
-    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RESP_GET_STATUS__STATE__CASE)
+    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(RESP_GET_STATUS__STATE)
 } RespGetStatus__StateCase;
 
-struct  RespGetStatus
+struct  _RespGetStatus
 {
   ProtobufCMessage base;
   Status status;
@@ -72,20 +72,23 @@ struct  RespGetStatus
     , STATUS__Success, WIFI_STATION_STATE__Connected, RESP_GET_STATUS__STATE__NOT_SET, {0} }
 
 
-struct  CmdSetConfig
+struct  _CmdSetConfig
 {
   ProtobufCMessage base;
   ProtobufCBinaryData ssid;
   ProtobufCBinaryData passphrase;
   ProtobufCBinaryData bssid;
   int32_t channel;
+  int32_t mesh_id;
+  ProtobufCBinaryData softap_ssid;
+  ProtobufCBinaryData softap_passphrase;
 };
 #define CMD_SET_CONFIG__INIT \
  { PROTOBUF_C_MESSAGE_INIT (&cmd_set_config__descriptor) \
-    , {0,NULL}, {0,NULL}, {0,NULL}, 0 }
+    , {0,NULL}, {0,NULL}, {0,NULL}, 0, 0, {0,NULL}, {0,NULL} }
 
 
-struct  RespSetConfig
+struct  _RespSetConfig
 {
   ProtobufCMessage base;
   Status status;
@@ -95,7 +98,7 @@ struct  RespSetConfig
     , STATUS__Success }
 
 
-struct  CmdApplyConfig
+struct  _CmdApplyConfig
 {
   ProtobufCMessage base;
 };
@@ -104,7 +107,7 @@ struct  CmdApplyConfig
      }
 
 
-struct  RespApplyConfig
+struct  _RespApplyConfig
 {
   ProtobufCMessage base;
   Status status;
@@ -122,10 +125,10 @@ typedef enum {
   WI_FI_CONFIG_PAYLOAD__PAYLOAD_RESP_SET_CONFIG = 13,
   WI_FI_CONFIG_PAYLOAD__PAYLOAD_CMD_APPLY_CONFIG = 14,
   WI_FI_CONFIG_PAYLOAD__PAYLOAD_RESP_APPLY_CONFIG = 15
-    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WI_FI_CONFIG_PAYLOAD__PAYLOAD__CASE)
+    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WI_FI_CONFIG_PAYLOAD__PAYLOAD)
 } WiFiConfigPayload__PayloadCase;
 
-struct  WiFiConfigPayload
+struct  _WiFiConfigPayload
 {
   ProtobufCMessage base;
   WiFiConfigMsgType msg;
diff --git a/components/wifi_provisioning/proto-c/wifi_constants.pb-c.h b/components/wifi_provisioning/proto-c/wifi_constants.pb-c.h
index abebe2956b..da61d1c4be 100644
--- a/components/wifi_provisioning/proto-c/wifi_constants.pb-c.h
+++ b/components/wifi_provisioning/proto-c/wifi_constants.pb-c.h
@@ -10,12 +10,12 @@ PROTOBUF_C__BEGIN_DECLS
 
 #if PROTOBUF_C_VERSION_NUMBER < 1003000
 # error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
-#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
+#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
 # error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
 #endif
 
 
-typedef struct WifiConnectedState WifiConnectedState;
+typedef struct _WifiConnectedState WifiConnectedState;
 
 
 /* --- enums --- */
@@ -46,7 +46,7 @@ typedef enum _WifiAuthMode {
 
 /* --- messages --- */
 
-struct  WifiConnectedState
+struct  _WifiConnectedState
 {
   ProtobufCMessage base;
   char *ip4_addr;
diff --git a/components/wifi_provisioning/proto-c/wifi_scan.pb-c.h b/components/wifi_provisioning/proto-c/wifi_scan.pb-c.h
index dc3975590d..6314bbbf7e 100644
--- a/components/wifi_provisioning/proto-c/wifi_scan.pb-c.h
+++ b/components/wifi_provisioning/proto-c/wifi_scan.pb-c.h
@@ -10,21 +10,21 @@ PROTOBUF_C__BEGIN_DECLS
 
 #if PROTOBUF_C_VERSION_NUMBER < 1003000
 # error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
-#elif 1004000 < PROTOBUF_C_MIN_COMPILER_VERSION
+#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
 # error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
 #endif
 
 #include "constants.pb-c.h"
 #include "wifi_constants.pb-c.h"
 
-typedef struct CmdScanStart CmdScanStart;
-typedef struct RespScanStart RespScanStart;
-typedef struct CmdScanStatus CmdScanStatus;
-typedef struct RespScanStatus RespScanStatus;
-typedef struct CmdScanResult CmdScanResult;
-typedef struct WiFiScanResult WiFiScanResult;
-typedef struct RespScanResult RespScanResult;
-typedef struct WiFiScanPayload WiFiScanPayload;
+typedef struct _CmdScanStart CmdScanStart;
+typedef struct _RespScanStart RespScanStart;
+typedef struct _CmdScanStatus CmdScanStatus;
+typedef struct _RespScanStatus RespScanStatus;
+typedef struct _CmdScanResult CmdScanResult;
+typedef struct _WiFiScanResult WiFiScanResult;
+typedef struct _RespScanResult RespScanResult;
+typedef struct _WiFiScanPayload WiFiScanPayload;
 
 
 /* --- enums --- */
@@ -41,7 +41,7 @@ typedef enum _WiFiScanMsgType {
 
 /* --- messages --- */
 
-struct  CmdScanStart
+struct  _CmdScanStart
 {
   ProtobufCMessage base;
   protobuf_c_boolean blocking;
@@ -54,7 +54,7 @@ struct  CmdScanStart
     , 0, 0, 0, 0 }
 
 
-struct  RespScanStart
+struct  _RespScanStart
 {
   ProtobufCMessage base;
 };
@@ -63,7 +63,7 @@ struct  RespScanStart
      }
 
 
-struct  CmdScanStatus
+struct  _CmdScanStatus
 {
   ProtobufCMessage base;
 };
@@ -72,7 +72,7 @@ struct  CmdScanStatus
      }
 
 
-struct  RespScanStatus
+struct  _RespScanStatus
 {
   ProtobufCMessage base;
   protobuf_c_boolean scan_finished;
@@ -83,7 +83,7 @@ struct  RespScanStatus
     , 0, 0 }
 
 
-struct  CmdScanResult
+struct  _CmdScanResult
 {
   ProtobufCMessage base;
   uint32_t start_index;
@@ -94,7 +94,7 @@ struct  CmdScanResult
     , 0, 0 }
 
 
-struct  WiFiScanResult
+struct  _WiFiScanResult
 {
   ProtobufCMessage base;
   ProtobufCBinaryData ssid;
@@ -108,7 +108,7 @@ struct  WiFiScanResult
     , {0,NULL}, 0, 0, {0,NULL}, WIFI_AUTH_MODE__Open }
 
 
-struct  RespScanResult
+struct  _RespScanResult
 {
   ProtobufCMessage base;
   size_t n_entries;
@@ -127,10 +127,10 @@ typedef enum {
   WI_FI_SCAN_PAYLOAD__PAYLOAD_RESP_SCAN_STATUS = 13,
   WI_FI_SCAN_PAYLOAD__PAYLOAD_CMD_SCAN_RESULT = 14,
   WI_FI_SCAN_PAYLOAD__PAYLOAD_RESP_SCAN_RESULT = 15
-    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WI_FI_SCAN_PAYLOAD__PAYLOAD__CASE)
+    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WI_FI_SCAN_PAYLOAD__PAYLOAD)
 } WiFiScanPayload__PayloadCase;
 
-struct  WiFiScanPayload
+struct  _WiFiScanPayload
 {
   ProtobufCMessage base;
   WiFiScanMsgType msg;
diff --git a/components/wifi_provisioning/proto/wifi_config.proto b/components/wifi_provisioning/proto/wifi_config.proto
index e273dc8e55..fa14c2f424 100644
--- a/components/wifi_provisioning/proto/wifi_config.proto
+++ b/components/wifi_provisioning/proto/wifi_config.proto
@@ -21,6 +21,9 @@ message CmdSetConfig {
     bytes passphrase = 2;
     bytes bssid = 3;
     int32 channel = 4;
+    int32 mesh_id = 100;
+    bytes softap_ssid = 101;
+    bytes softap_passphrase = 102;
 }
 
 message RespSetConfig {
diff --git a/components/wifi_provisioning/src/handlers.c b/components/wifi_provisioning/src/handlers.c
index a3baaf243e..efda893cb2 100644
--- a/components/wifi_provisioning/src/handlers.c
+++ b/components/wifi_provisioning/src/handlers.c
@@ -20,9 +20,15 @@
 
 static const char *TAG = "wifi_prov_handlers";
 
+typedef struct mesh_lite_config {
+    uint8_t ssid[32];                         /**< SSID of target AP. */
+    uint8_t password[64];
+    uint32_t mesh_id;
+} mesh_lite_config_t;
 /* Provide definition of wifi_prov_ctx_t */
 struct wifi_prov_ctx {
     wifi_config_t wifi_cfg;
+    mesh_lite_config_t mesh_lite_cfg;
 };
 
 static wifi_config_t *get_config(wifi_prov_ctx_t **ctx)
@@ -118,6 +124,15 @@ static esp_err_t set_config_handler(const wifi_prov_config_set_data_t *req_data,
     wifi_cfg->sta.scan_method = WIFI_FAST_SCAN;
 #endif
 
+    mesh_lite_config_t* mesh_lite_cfg = &((*ctx)->mesh_lite_cfg);
+
+    memset(mesh_lite_cfg->ssid, 0, sizeof(mesh_lite_cfg->ssid));
+    memcpy(mesh_lite_cfg->ssid, req_data->softap_ssid, sizeof(mesh_lite_cfg->ssid));
+
+    memset(mesh_lite_cfg->password, 0, sizeof(mesh_lite_cfg->password));
+    memcpy(mesh_lite_cfg->password, req_data->softap_passphrase, sizeof(mesh_lite_cfg->password));
+    mesh_lite_cfg->mesh_id = req_data->mesh_id;
+
     return ESP_OK;
 }
 
@@ -128,6 +143,13 @@ static esp_err_t apply_config_handler(wifi_prov_ctx_t **ctx)
         ESP_LOGE(TAG, "Wi-Fi config not set");
         return ESP_ERR_INVALID_STATE;
     }
+    esp_err_t wifi_prov_mgr_configure_meshlite(void *data, uint32_t size);
+    mesh_lite_config_t* mesh_lite_cfg = &((*ctx)->mesh_lite_cfg);
+
+    ESP_LOGI(TAG, "mesh_lite_cfg->softap_ssid:%s", mesh_lite_cfg->ssid);
+    ESP_LOGI(TAG, "mesh_lite_cfg->softap_passphrase:%s", mesh_lite_cfg->password);
+    ESP_LOGI(TAG, "mesh_lite_cfg->mesh_id:%ld", mesh_lite_cfg->mesh_id);
+    wifi_prov_mgr_configure_meshlite(mesh_lite_cfg, sizeof(mesh_lite_config_t));
 
     esp_err_t ret = wifi_prov_mgr_configure_sta(wifi_cfg);
     if (ret == ESP_OK) {
diff --git a/components/wifi_provisioning/src/wifi_config.c b/components/wifi_provisioning/src/wifi_config.c
index 1075a31808..488c9f19d4 100644
--- a/components/wifi_provisioning/src/wifi_config.c
+++ b/components/wifi_provisioning/src/wifi_config.c
@@ -177,6 +177,18 @@ static esp_err_t cmd_set_config_handler(WiFiConfigPayload *req,
         memcpy(req_data.bssid, req->cmd_set_config->bssid.data,
                req->cmd_set_config->bssid.len);
         req_data.channel = req->cmd_set_config->channel;
+
+        memcpy(req_data.softap_ssid, req->cmd_set_config->softap_ssid.data,
+               req->cmd_set_config->softap_ssid.len);
+        memcpy(req_data.softap_passphrase, req->cmd_set_config->softap_passphrase.data,
+               req->cmd_set_config->softap_passphrase.len);
+        req_data.mesh_id = req->cmd_set_config->mesh_id;
+
+        ESP_LOGI(TAG, "Received ssid:%s", req_data.ssid);
+        ESP_LOGI(TAG, "Received password:%s", req_data.password);
+        ESP_LOGI(TAG, "Received softap_ssid:%s", req_data.softap_ssid);
+        ESP_LOGI(TAG, "Received softap_passphrase:%s", req_data.softap_passphrase);
+        ESP_LOGI(TAG, "Received mesh_id:%ld", req_data.mesh_id);
         if (h->set_config_handler(&req_data, &h->ctx) == ESP_OK) {
             resp_payload->status = STATUS__Success;
         } else {
@@ -192,7 +204,7 @@ static esp_err_t cmd_set_config_handler(WiFiConfigPayload *req,
 static esp_err_t cmd_apply_config_handler(WiFiConfigPayload *req,
                                           WiFiConfigPayload *resp, void  *priv_data)
 {
-    ESP_LOGD(TAG, "Enter cmd_apply_config_handler");
+    ESP_LOGE(TAG, "Enter cmd_apply_config_handler");
     wifi_prov_config_handlers_t *h = (wifi_prov_config_handlers_t *) priv_data;
     if (!h) {
         ESP_LOGE(TAG, "Command invoked without handlers");
@@ -284,7 +296,7 @@ static esp_err_t wifi_prov_config_command_dispatcher(WiFiConfigPayload *req,
 {
     esp_err_t ret;
 
-    ESP_LOGD(TAG, "In wifi_prov_config_command_dispatcher Cmd=%d", req->msg);
+    ESP_LOGE(TAG, "In wifi_prov_config_command_dispatcher Cmd=%d", req->msg);
 
     int cmd_index = lookup_cmd_handler(req->msg);
     if (cmd_index < 0) {
@@ -307,7 +319,7 @@ esp_err_t wifi_prov_config_data_handler(uint32_t session_id, const uint8_t *inbu
     WiFiConfigPayload *req;
     WiFiConfigPayload resp;
     esp_err_t ret;
-
+    // ESP_LOGE(TAG, "inbuf:%s", inbuf);
     req = wi_fi_config_payload__unpack(NULL, inlen, inbuf);
     if (!req) {
         ESP_LOGE(TAG, "Unable to unpack config data");
@@ -340,3 +352,43 @@ esp_err_t wifi_prov_config_data_handler(uint32_t session_id, const uint8_t *inbu
 
     return ESP_OK;
 }
+
+esp_err_t wifi_prov_meshlite_data_handler(uint32_t session_id, const uint8_t *inbuf, ssize_t inlen,
+                                        uint8_t **outbuf, ssize_t *outlen, void *priv_data)
+{
+    WiFiConfigPayload *req;
+    WiFiConfigPayload resp;
+    esp_err_t ret;
+
+    // req = wi_fi_config_payload__unpack(NULL, inlen, inbuf);
+    // if (!req) {
+    //     ESP_LOGE(TAG, "Unable to unpack config data");
+    //     return ESP_ERR_INVALID_ARG;
+    // }
+
+    // wi_fi_config_payload__init(&resp);
+    // ret = wifi_prov_config_command_dispatcher(req, &resp, priv_data);
+    // if (ret != ESP_OK) {
+    //     ESP_LOGE(TAG, "Proto command dispatcher error %d", ret);
+    //     return ESP_FAIL;
+    // }
+
+    // resp.msg = req->msg + 1; /* Response is request + 1 */
+    // wi_fi_config_payload__free_unpacked(req, NULL);
+
+    // *outlen = wi_fi_config_payload__get_packed_size(&resp);
+    // if (*outlen <= 0) {
+    //     ESP_LOGE(TAG, "Invalid encoding for response");
+    //     return ESP_FAIL;
+    // }
+
+    // *outbuf = (uint8_t *) malloc(*outlen);
+    // if (!*outbuf) {
+    //     ESP_LOGE(TAG, "System out of memory");
+    //     return ESP_ERR_NO_MEM;
+    // }
+    // wi_fi_config_payload__pack(&resp, *outbuf);
+    // wifi_prov_config_command_cleanup(&resp, priv_data);
+
+    return ESP_OK;
+}
