stages:
  - pre_check
  - build
  - deploy

# global variables
variables: &global-variables
  GIT_STRATEGY: clone
  PYTHON_VER: 3

default:
  retry:
    max: 2
    # In case of a runner failure we could hop to another one, or a network error could go away.
    when: always

.setup_esp_idf: &setup_esp_idf
  - image_str=${image}
  - image_str=(${image_str//:/ })
  - if [ -z "${idf_branch}" ]; then idf_branch=${image_str[1]}; fi
  - echo "idf_branch=${idf_branch}"
  - cd $IDF_PATH
  - git checkout ${idf_branch}
  - git submodule update --init --recursive
  - cd -

.before_script_preparation: &before_script_preparation
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - echo -n $GITLAB_KEY >> ~/.ssh/id_rsa_base64
  - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
  - chmod 600 ~/.ssh/id_rsa
  - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
  - export IDF_PATH=/opt/esp/idf
  - python -m pip install --upgrade idf-component-manager

.build_default_example: &build_default_example
  - cd examples/mesh_local_control
  - rm -rf build sdkconfig
  - idf.py ${compile_option} set-target ${idf_target}
  - idf.py build
  - cd -

  - cd examples/mesh_local_control
  - git checkout -- .
  - git clean -xdff
  - echo -e "\nCONFIG_MESH_LITE_NODE_INFO_REPORT=y" >> sdkconfig.defaults.${idf_target}
  - echo -e "\nCONFIG_ESP_MESH_LITE_OTA_ENABLE=y" >> sdkconfig.defaults.${idf_target}
  - echo -e "\nCONFIG_MESH_LITE_PROV_ENABLE=y" >> sdkconfig.defaults.${idf_target}
  - echo -e "\nCONFIG_MESH_LITE_WIRELESS_DEBUG=y" >> sdkconfig.defaults.${idf_target}
  - idf.py ${compile_option} set-target ${idf_target}
  - idf.py build
  - cd -

  - cd examples/no_router
  - rm -rf build sdkconfig
  - idf.py ${compile_option} set-target ${idf_target}
  - idf.py build
  - cd -
  - cd examples/wireless_debug
  - rm -rf build sdkconfig
  - idf.py ${compile_option} set-target ${idf_target}
  - idf.py build
  - cd -

.build_provisioning_example: &build_provisioning_example
  - cd examples/mesh_wifi_provisioning
  - rm -rf build sdkconfig
  - idf.py ${compile_option} set-target ${idf_target}
  - idf.py build
  - cd -

.build_rainmaker_example: &build_rainmaker_example
  - cd examples/rainmaker/led_light
  - rm -rf build sdkconfig
  - idf.py ${compile_option} set-target ${idf_target}
  - idf.py build
  - cd -
  - cd examples/rainmaker/provisioning_controller
  - rm -rf build sdkconfig
  - idf.py ${compile_option} set-target ${idf_target}
  - idf.py build
  - cd -

.pre_check_template:
  stage: pre_check
  image: python:3.9
  tags: ["build", "amd64", "internet"]
  needs: []

check_pre_commit:
  extends:
    - .pre_check_template
  before_script:
    - pip install pre-commit
  script:
    - pre-commit install --allow-missing-config -t pre-commit -t commit-msg
    - pre-commit run -a

esp32_build:
  stage: build

  tags:
    - build
  image: $IMAGE
  parallel:
    matrix:
      - IMAGE: ['espressif/idf:release-v5.0', 'espressif/idf:release-v5.1', 'espressif/idf:release-v5.2', 'espressif/idf:release-v5.3']

  variables:
    <<: *global-variables
    idf_target: esp32

  before_script:
    - *before_script_preparation

  script:
    - *setup_esp_idf
    - *build_default_example
    - *build_rainmaker_example
    - *build_provisioning_example

esp32c2_build:
  stage: build
  tags:
    - build
  image: $IMAGE
  parallel:
    matrix:
      - IMAGE: ['espressif/idf:release-v5.0', 'espressif/idf:release-v5.1', 'espressif/idf:release-v5.2', 'espressif/idf:release-v5.3']

  variables:
    <<: *global-variables
    idf_target: esp32c2

  before_script:
    - *before_script_preparation

  script:
    - *setup_esp_idf
    - *build_default_example
    - *build_rainmaker_example

esp32c3_build:
  stage: build
  tags:
    - build
  image: $IMAGE
  parallel:
    matrix:
      - IMAGE: ['espressif/idf:release-v5.0', 'espressif/idf:release-v5.1', 'espressif/idf:release-v5.2', 'espressif/idf:release-v5.3']

  variables:
    <<: *global-variables
    idf_target: esp32c3

  before_script:
    - *before_script_preparation

  script:
    - *setup_esp_idf
    - *build_default_example
    - *build_rainmaker_example
    - *build_provisioning_example

esp32s2_build:
  stage: build
  tags:
    - build
  image: $IMAGE
  parallel:
    matrix:
      - IMAGE: ['espressif/idf:release-v5.0', 'espressif/idf:release-v5.1', 'espressif/idf:release-v5.2', 'espressif/idf:release-v5.3']

  variables:
    <<: *global-variables
    idf_target: esp32s2

  before_script:
    - *before_script_preparation

  script:
    - *setup_esp_idf
    - *build_default_example

esp32s3_build:
  stage: build
  tags:
    - build
  image: $IMAGE
  parallel:
    matrix:
      - IMAGE: ['espressif/idf:release-v5.0', 'espressif/idf:release-v5.1', 'espressif/idf:release-v5.2', 'espressif/idf:release-v5.3']

  variables:
    <<: *global-variables
    idf_target: esp32s3

  before_script:
    - *before_script_preparation

  script:
    - *setup_esp_idf
    - *build_default_example
    - *build_rainmaker_example
    - *build_provisioning_example

esp32c6_build:
  stage: build
  tags:
    - build
  image: $IMAGE
  parallel:
    matrix:
      - IMAGE: ['espressif/idf:release-v5.1', 'espressif/idf:release-v5.2', 'espressif/idf:release-v5.3']

  variables:
    <<: *global-variables
    idf_target: esp32c6

  before_script:
    - *before_script_preparation

  script:
    - *setup_esp_idf
    - *build_default_example
    - *build_rainmaker_example

esp32c5_build:
  stage: build
  tags:
    - build
  image: $IMAGE
  parallel:
    matrix:
      - IMAGE: ['espressif/idf:latest']

  variables:
    <<: *global-variables
    idf_branch: master
    idf_target: esp32c5
    compile_option: --preview

  before_script:
    - *before_script_preparation

  script:
    - *setup_esp_idf
    - *build_default_example
    # rainmaker does not support C5 yet
    # - *build_rainmaker_example

push_master_to_github:
  stage: deploy
  only:
    - master
    - /^release\/v/
#  when: on_success
  image: $CI_DOCKER_REGISTRY/esp32-ci-env
  variables:
    GIT_STRATEGY: clone
    GITHUB_PUSH_REFS: refs/remotes/origin/release refs/remotes/origin/master
  before_script:
    - echo "skip default before_script"
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GH_PUSH_KEY >> ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git remote add github git@github.com:espressif/esp-mesh-lite.git
    # What the next line of script does: goes through the list of refs for all branches we push to github,
    # generates a snippet of shell which is evaluated. The snippet checks CI_BUILD_REF against the SHA
    # (aka objectname) at tip of each branch, and if any SHAs match then it checks out the local branch
    # and then pushes that ref to a corresponding github branch
    #
    # NB: In gitlab 9.x, CI_BUILD_REF was deprecated. New name is CI_COMMIT_REF. If below command suddenly
    # generates bash syntax errors, this is probably why.
    - eval $(git for-each-ref --shell bash --format 'if [ $CI_COMMIT_SHA == %(objectname) ]; then git checkout -B %(refname:strip=3); git push --follow-tags github %(refname:strip=3); fi;' $GITHUB_PUSH_REFS)
